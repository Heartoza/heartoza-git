import React, { useEffect, useState } from "react";
import { jwtDecode } from "jwt-decode";
import { AuthService } from "../../services/authService";
import { useNavigate } from "react-router-dom";
import "../css/Cart.css";
import http from "../../services/api";

const PHONE_RE = /^[0-9+()\s-]{8,}$/;

export default function Cart() {
    const [cart, setCart] = useState(null);
    const navigate = useNavigate();
    const [loading, setLoading] = useState(true);

    const [accessory, setAccessory] = useState("");
    const [led, setLed] = useState("Kh√¥ng");
    const [wish, setWish] = useState("");
    const [cardMessage, setCardMessage] = useState("");

    const [selectedItems, setSelectedItems] = useState([]);
    const [selectAll, setSelectAll] = useState(false);

    const [addresses, setAddresses] = useState([]);            // t·∫•t c·∫£ ƒë·ªãa ch·ªâ (raw)
    const [usableAddresses, setUsableAddresses] = useState([]); // ƒë·ªãa ch·ªâ c√≥ SƒêT h·ª£p l·ªá
    const [selectedAddress, setSelectedAddress] = useState(null);

    useEffect(() => {
        const fetchCartAndAddresses = async () => {
            const token = localStorage.getItem("token");
            if (!token) {
                navigate("/login?reason=cart");
                return;
            }

            try {
                const cartRes = await http.get("Cart");
                const mappedCart = {
                    ...cartRes.data,
                    cartItems: cartRes.data.cartItems.map((ci) => ({
                        ...ci,
                        cartItemId: Number(ci.cartItemId),
                        productName: ci.product?.name || ci.productName || "S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh",
                        lineTotal: ci.quantity * ci.unitPrice,
                    })),
                };
                setCart(mappedCart);

                const profile = await AuthService.getProfile();
                const raw = profile.addresses || [];
                const usable = raw.filter((a) => PHONE_RE.test((a.phone || "").trim()));

                setAddresses(raw);
                setUsableAddresses(usable);

                // ∆∞u ti√™n default h·ª£p l·ªá, n·∫øu kh√¥ng l·∫•y c√°i ƒë·∫ßu ti√™n h·ª£p l·ªá
                const defaultUsable = usable.find((a) => a.isDefault);
                if (defaultUsable) setSelectedAddress(defaultUsable.addressId);
                else if (usable.length) setSelectedAddress(usable[0].addressId);
                else setSelectedAddress(null);
            } catch (err) {
                console.error("L·ªói khi load Cart/Addresses:", err);
            } finally {
                setLoading(false);
            }
        };

        fetchCartAndAddresses();
    }, [navigate]);

    const updateQuantity = async (cartItemId, newQuantity) => {
        try {
            const token = localStorage.getItem("token");
            if (!token) return;

            await http.post("Cart/UpdateQuantity", {
                cartItemId,
                quantity: newQuantity,
            });

            setCart((prev) => {
                const updatedItems = prev.cartItems
                    .map((ci) =>
                        ci.cartItemId === cartItemId
                            ? {
                                ...ci,
                                quantity: newQuantity,
                                lineTotal: newQuantity * ci.unitPrice,
                            }
                            : ci
                    )
                    .filter((ci) => ci.quantity > 0);
                return { ...prev, cartItems: updatedItems };
            });
        } catch (err) {
            console.error("L·ªói c·∫≠p nh·∫≠t gi·ªè h√†ng:", err);
            alert(err.userMessage || "C·∫≠p nh·∫≠t gi·ªè h√†ng th·∫•t b·∫°i.");
        }
    };

    const removeItem = async (cartItemId, productName) => {
        if (!window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a "${productName}" kh·ªèi gi·ªè h√†ng?`)) return;

        try {
            const token = localStorage.getItem("token");
            if (!token) return;

            await http.delete(`Cart/RemoveItem/${cartItemId}`);

            setCart((prev) => ({
                ...prev,
                cartItems: prev.cartItems.filter((ci) => ci.cartItemId !== cartItemId),
            }));

            setSelectedItems((prev) => prev.filter((id) => id !== cartItemId));
        } catch (err) {
            console.error("L·ªói x√≥a item:", err);
            alert(err.userMessage || "Xo√° s·∫£n ph·∫©m th·∫•t b·∫°i.");
        }
    };

    const toggleSelectItem = (cartItemId) => {
        setSelectedItems((prev) =>
            prev.includes(cartItemId) ? prev.filter((x) => x !== cartItemId) : [...prev, cartItemId]
        );
    };

    const toggleSelectAll = () => {
        if (!cart) return;

        if (selectAll) {
            setSelectedItems([]);
        } else {
            setSelectedItems(cart.cartItems.map((ci) => ci.cartItemId));
        }
        setSelectAll(!selectAll);
    };

    const handleCheckout = async () => {
        if (selectedItems.length === 0) {
            alert("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m ƒë·ªÉ thanh to√°n.");
            return;
        }
        if (!selectedAddress) {
            alert("Vui l√≤ng ch·ªçn ƒë·ªãa ch·ªâ giao h√†ng.");
            return;
        }

        // ‚úÖ b·∫£o hi·ªÉm: selectedAddress ph·∫£i n·∫±m trong usableAddresses
        const isUsable = usableAddresses.some((a) => a.addressId === selectedAddress);
        if (!isUsable) {
            alert("ƒê·ªãa ch·ªâ giao h√†ng thi·∫øu s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá. Vui l√≤ng c·∫≠p nh·∫≠t trong trang H·ªì s∆°.");
            return;
        }

        if (!accessory.trim() || !led.trim() || !cardMessage.trim() || !wish.trim()) {
            alert("‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c tr∆∞·ªùng trong ph·∫ßn ghi ch√∫ (Ph·ª• ki·ªán, LED, L·ªùi nh·∫Øn, Mong mu·ªën).");
            return;
        }

        try {
            const token = localStorage.getItem("token");
            if (!token) return;

            const payload = {
                shippingAddressId: selectedAddress,
                shippingFee: 0,
                method: "COD",
                comment: `üéÅ Ph·ª• ki·ªán k√®m theo: ${accessory}\nüí° LED: ${led}\n‚úâÔ∏è L·ªùi nh·∫Øn trong thi·ªáp: ${cardMessage}\nüí≠ Mong mu·ªën: ${wish}`,
                items: selectedItems.map((id) => {
                    const item = cart.cartItems.find((ci) => ci.cartItemId === id);
                    return {
                        productId: item.productId,
                        quantity: item.quantity,
                    };
                }),
            };

            const res = await http.post("orders", payload);
            alert(`‚úÖ Thanh to√°n th√†nh c√¥ng! M√£ ƒë∆°n: ${res.data.orderCode}`);

            await Promise.all(selectedItems.map((id) => http.delete(`Cart/RemoveItem/${id}`)));

            setCart((prev) => ({
                ...prev,
                cartItems: prev.cartItems.filter((ci) => !selectedItems.includes(ci.cartItemId)),
            }));

            setSelectedItems([]);
            navigate("/orders");
        } catch (err) {
            console.error("L·ªói thanh to√°n chi ti·∫øt:", err);
            // d√πng message chu·∫©n ho√° t·ª´ interceptor
            const msg =
                err?.userMessage ||
                err?.response?.data?.message ||
                err?.response?.data?.title ||
                err?.response?.data ||
                "C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n h√†ng.";
            alert(`‚ùå ${msg}`);
        }
    };

    if (loading) {
        return (
            <div className="cart-container">
                <div className="loading-state">
                    <div className="loading-spinner"></div>
                    <p>ƒêang t·∫£i gi·ªè h√†ng...</p>
                </div>
            </div>
        );
    }

    if (!cart || !cart.cartItems || cart.cartItems.length === 0) {
        return (
            <div className="cart-container">
                <div className="empty-cart">
                    <div className="empty-cart-icon">üõí</div>
                    <p>Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng</p>
                </div>
            </div>
        );
    }

    const total = cart.cartItems
        .filter((i) => selectedItems.includes(i.cartItemId))
        .reduce((sum, i) => sum + i.lineTotal, 0);

    const selectedCount = selectedItems.length;

    return (
        <div className="cart-container">
            <h2>Gi·ªè h√†ng c·ªßa b·∫°n</h2>

            <div className="cart-layout">
                {/* Main Cart Section */}
                <div className="cart-main">
                    {/* Select All Bar */}
                    <div className="select-all-bar">
                        <label>
                            <input type="checkbox" checked={selectAll} onChange={toggleSelectAll} />
                            Ch·ªçn t·∫•t c·∫£ ({cart.cartItems.length} s·∫£n ph·∫©m)
                        </label>
                    </div>

                    {/* Cart Items */}
                    {cart.cartItems.map((item) => (
                        <div
                            key={item.cartItemId}
                            className={`cart-item-card ${selectedItems.includes(item.cartItemId) ? "selected" : ""}`}
                        >
                            <div className="item-checkbox">
                                <input
                                    type="checkbox"
                                    checked={selectedItems.includes(item.cartItemId)}
                                    onChange={() => toggleSelectItem(item.cartItemId)}
                                />
                            </div>

                            <div className="item-info">
                                <h3 className="item-name">{item.productName}</h3>
                            </div>

                            <div className="item-quantity">
                                <div className="quantity-control">
                                    <button
                                        className="quantity-btn"
                                        onClick={() => updateQuantity(item.cartItemId, item.quantity - 1)}
                                        disabled={item.quantity <= 1}
                                    >
                                        ‚àí
                                    </button>
                                    <span className="quantity-value">{item.quantity}</span>
                                    <button
                                        className="quantity-btn"
                                        onClick={() => updateQuantity(item.cartItemId, item.quantity + 1)}
                                    >
                                        +
                                    </button>
                                </div>
                            </div>

                            <div className="item-total">
                                <span>{item.lineTotal.toLocaleString()} ƒë</span>
                            </div>

                            <div className="item-remove">
                                <button
                                    className="remove-btn"
                                    onClick={() => removeItem(item.cartItemId, item.productName)}
                                    title="X√≥a s·∫£n ph·∫©m"
                                >
                                    üóëÔ∏è
                                </button>
                            </div>
                        </div>
                    ))}

                    {/* Comment Section */}
                    <div className="comment-section">
                        <h3>üí¨ Ghi ch√∫ cho ƒë∆°n h√†ng</h3>

                        <div className="comment-field">
                            <label>üéÅ Ph·ª• ki·ªán k√®m theo</label>
                            <input
                                type="text"
                                value={accessory}
                                onChange={(e) => setAccessory(e.target.value)}
                                placeholder="V√≠ d·ª•: G·∫•u b√¥ng nh·ªè, hoa kh√¥..."
                            />
                        </div>

                        <div className="comment-field">
                            <label>üí° LED trang tr√≠</label>
                            <select value={led} onChange={(e) => setLed(e.target.value)}>
                                <option value="Kh√¥ng">Kh√¥ng</option>
                                <option value="C√≥">C√≥</option>
                            </select>
                        </div>

                        <div className="comment-field">
                            <label>‚úâÔ∏è L·ªùi nh·∫Øn trong thi·ªáp</label>
                            <textarea
                                value={cardMessage}
                                onChange={(e) => setCardMessage(e.target.value)}
                                placeholder="Nh·∫≠p l·ªùi nh·∫Øn b·∫°n mu·ªën ghi trong thi·ªáp..."
                                rows={3}
                            />
                        </div>
                        <div className="comment-field">
                            <label>üí≠ Mong mu·ªën c·ªßa b·∫°n</label>
                            <textarea
                                value={wish}
                                onChange={(e) => setWish(e.target.value)}
                                placeholder="V√≠ d·ª•: Giao h√†ng s·ªõm tr∆∞·ªõc ng√†y l·ªÖ, g√≥i qu√† th·∫≠t ƒë·∫πp..."
                                rows={3}
                            />
                        </div>
                    </div>

                    {/* Address Section */}
                    <div className="address-section">
                        <h3>üè† ƒê·ªãa ch·ªâ giao h√†ng</h3>

                        {usableAddresses.length === 0 ? (
                            <div style={{ textAlign: "center", padding: "20px" }}>
                                <p style={{ color: "#718096", marginBottom: "12px" }}>
                                    Ch∆∞a c√≥ ƒë·ªãa ch·ªâ h·ª£p l·ªá (thi·∫øu s·ªë ƒëi·ªán tho·∫°i).
                                </p>
                                <a
                                    href="/profile"
                                    style={{ color: "#ff6f61", textDecoration: "none", fontWeight: 600 }}
                                >
                                    + C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i trong ƒë·ªãa ch·ªâ
                                </a>
                            </div>
                        ) : (
                            <>
                                {/* n·∫øu c√≥ ƒë·ªãa ch·ªâ b·ªã ·∫©n v√¨ thi·∫øu SƒêT, nh·∫Øc nh·∫π */}
                                {addresses.length > usableAddresses.length && (
                                    <div className="note" style={{ marginBottom: 8, color: "#b45309" }}>
                                        M·ªôt s·ªë ƒë·ªãa ch·ªâ ƒë√£ ·∫©n v√¨ thi·∫øu s·ªë ƒëi·ªán tho·∫°i. H√£y c·∫≠p nh·∫≠t trong trang H·ªì s∆°.
                                    </div>
                                )}

                                <ul>
                                    {usableAddresses.map((addr) => (
                                        <li
                                            key={addr.addressId}
                                            className={`address-item ${selectedAddress === addr.addressId ? "selected" : ""}`}
                                        >
                                            <label>
                                                <input
                                                    type="radio"
                                                    name="shippingAddress"
                                                    value={addr.addressId}
                                                    checked={selectedAddress === addr.addressId}
                                                    onChange={() => setSelectedAddress(addr.addressId)}
                                                />
                                                <div className="address-content">
                                                    <div className="address-name">
                                                        {addr.fullName}
                                                        {addr.isDefault && <span className="default-badge">M·∫∑c ƒë·ªãnh</span>}
                                                    </div>
                                                    <div className="address-details">
                                                        {addr.line1}, {addr.district}, {addr.city} ‚Ä¢ üìû {addr.phone}
                                                    </div>
                                                </div>
                                            </label>
                                        </li>
                                    ))}
                                </ul>
                            </>
                        )}
                    </div>
                </div>

                {/* Sidebar Summary */}
                <div className="cart-sidebar">
                    <div className="summary-card">
                        <h3>üìã T√≥m t·∫Øt ƒë∆°n h√†ng</h3>

                        <div className="summary-row">
                            <span className="summary-label">S·∫£n ph·∫©m ƒë√£ ch·ªçn</span>
                            <span className="summary-value">{selectedCount} s·∫£n ph·∫©m</span>
                        </div>

                        <div className="summary-row">
                            <span className="summary-label">T·∫°m t√≠nh</span>
                            <span className="summary-value">{total.toLocaleString()} ƒë</span>
                        </div>

                        <div className="summary-row">
                            <span className="summary-label">Thanh to√°n</span>
                            <span className="summary-value" style={{ color: "#48bb78" }}>
                                Khi nh·∫≠n h√†ng
                            </span>
                        </div>

                        <div className="summary-total">
                            <span className="label">T·ªïng c·ªông</span>
                            <span className="value">{total.toLocaleString()} ƒë</span>
                        </div>

                        <button
                            className="checkout-btn"
                            onClick={handleCheckout}
                            disabled={selectedItems.length === 0 || !selectedAddress || usableAddresses.length === 0}
                        >
                            {selectedItems.length === 0
                                ? "‚ö†Ô∏è Ch·ªçn s·∫£n ph·∫©m"
                                : !selectedAddress || usableAddresses.length === 0
                                    ? "‚ö†Ô∏è Ch·ªçn ƒë·ªãa ch·ªâ h·ª£p l·ªá"
                                    : "‚úÖ Thanh to√°n ngay"}
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
}
